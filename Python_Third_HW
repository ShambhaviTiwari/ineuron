Python OOP Assignment
Q1. What is the purpose of Python's OOP?
Answer:
Object Oriented Programming is important as it helps in encapsulation of code
which helps in abstaining the code  , inheritance which helps in reusability of code ,polymorphism 
and abstarction.

Q2. Where does an inheritance search look for an attribute?
Answer:
First it looks at the instance object, then at the class which the instance is created from and then it's superclasses.
Q3. How do you distinguish between a class object and an instance object?
Answer: Class object is defined for the entirety of the class and instance object is the one which 
can be accessed using self and is declared in the constructor of a class.
Q4. What makes the first argument in a classâ€™s method function special?
Answer:
self is the first argumnet in a class's method and it is special as it is a pointer to the class.
Q5. What is the purpose of the init method?
Answer: Intializes the object's attributes.
Q6. What is the process for creating a class instance?
Answer: class_name(arg a,arg b)
Q7. What is the process for creating a class?
class_name(arg_a,arg_b):
  def __init__(self,arg_a , arg_b):
    self.arg_a = arg_a
    self.arg_b = arg_b
    
Q8. How would you define the superclasses of a class?
Answer:superclass of a class is the one which gives the functions to inherits.

Q9. What is the relationship between classes and modules?
Answer: Module is teh collection of classes, functions and variables.
Q10. How do you make instances and classes?
Answer:
class_name(arg_a,arg_b):
  def __init__(self,arg_a , arg_b):
    self.arg_a = arg_a
    self.arg_b = arg_b
 obj_name = class_name(a,b)
Q11. Where and how should be class attributes created?
Answer: Class attributes should be created in the class itself.
Q12. Where and how are instance attributes created?
Answer: instance attributes are declared in the constructor __init__.
Q13. What does the term "self" in a Python class mean?
Answer: Self is a pointer to the current instance of a class.
Q14. How does a Python class handle operator overloading?
Answer: Done by creating functions accordingky
It is handled as follows:
class A:
  def __init__(self,a):
    self.a = a
  def __add__(self,o):
   return self.a+o.a
Q15. When do you consider allowing operator overloading of your classes?
Answer: When the same operator performs different operations, like + performs adding of integers and also concating strings.
Q16. What is the most popular form of operator overloading?
Answer: Addition
Q17. What are the two most important concepts to grasp in order to comprehend Python OOP code?
Answer:Inheritance and Polymorphism
Q18. Describe three applications for exception processing.
Answer:To proceed code without stopping for errors,Debugging and giving warning messages.
applications:
1) to encounter or solve list index error
2) to encounter or solve zero division error
3) to encounter or solve arithmetic error
Q19. What happens if you don't do something extra to treat an exception?
Answer: An error occurs and stops the code.
Q20. What are your options for recovering from an exception in your script?
Answer:
1) try except blocks
2) else block in try except
3) finally block after try except
Q21. Describe two methods for triggering exceptions in your script.
Answer: 1)Using try block
2) Using raise, to raise an exception
Q22. Identify two methods for specifying actions to be executed at termination time, regardless of whether or not an exception exists.
Answer:else and finally
Q23. What is the purpose of the try statement?
Answer : To try a piece of risky code which can cause error to the program and stop the execution.
Q24. What are the two most popular try statement variations?
Answer: Try/except and try/except with else block.
Q25. What is the purpose of the raise statement?
Answer: To raise an exception, by inserting a custom msg to it.
Q26. What does the assert statement do, and what other statement is it like?
Answer: Assert helps in checking whether lhs is equals to rhs.
Assert helps in debugging code.
Q27. What is the purpose of the with/as argument, and what other statement is it like?
Answer: with/as argumnet is a replacement of try /catch . It ensures that you do not leave any resource open.
Q28. What are *args, **kwargs?
Answer: *args(used for giving as many argumnets) and **kwargs(used for giving key value paired arguments) is used for input of arguments in a function
Q29. How can I pass optional or keyword parameters from one function to another?
Answer: Using default parameters.
Q30. What are Lambda Functions?
Answer : lambda functions are ananymous functions,the ones which do not need the def keyword to define the function and directly deal with the exceution of the same.
Q31. Explain Inheritance in Python with an example?
Answer: class Car():
          -----
          class Tata(Car):
          ------

Q32. Suppose class C inherits from classes A and B as class C(A,B).
Classes A and B both have their own versions of method func(). If we call func() from an object of class C, which version gets invoked?
Answer: func() will be of A as declared first.
Q33. Which methods/functions do we use to determine the type of instance and inheritance?
Answer: isintance() and issubclass()
Q34.Explain the use of the 'nonlocal' keyword in Python.
Answer: Non local keyword is used in nested functions where the variable should not belong to an inner function.
Q35. What is the global keyword?
Ansswer: Defined outside the function this variable is used both inside and outside the function.
